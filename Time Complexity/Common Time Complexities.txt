MOST COMMON TIME COMPLEXITIES :
-------------------------------------

1.CONSTANT TIME COMPLEXITY :
--------------------------------
 Time Complexity = O(1)

Eg : addTwoNumbers(int a, int b){
         return a + b;
     }
     int result;
     result = addTwoNumbers(5,6);
     System.out.println(result);

2.LINEAR TIME COMPLEXITY : 
--------------------------

--> The time will grow linearly with increase in size.
--> Time Complexity = 0(N)

Eg : printArraySum(int[] arr){
         int sum;
         sum = 0;
         int N;
         N = arr.length;
         for(int i = 0 ; i < N ; i++){
             sum += arr[i];
         }
         System.out.println(sum);
     }

3. QUADRATIC TIME COMPLEXITY : 
------------------------------

-->Time Complexity = O(N^2)

Eg : func(int[] arr){
         int N = arr.length;
         for(int i = 0 ; i < N ; i++){
             for(int j = 0 ; j < N ; j++){
                 System.out.println(arr[i] + " " + arr[j]);
             }
         }
     }    

4. LOGARITHMIC TIME COMPLEXITY :
--------------------------------

--> Time Complexity = O(log(N))

Eg : Binary Search
     
    int binaryearch(int[] arr , int target){
        int answer = -1;
        int start = 0;
        int end = arr.length - 1;
        while ((start <= end)){
            int mid = (start + end) / 2;
            if(arr[mid] < target){
                start = mid + 1;
            }else if(arr[mid] > target){
                end = mid - 1;
            }else{
                return mid;
            }
        }
        return answer;
    }

   1st step  --> search space = N
   2nd step  --> search space = N / 2
   3rd step  --> search space = N / 4
   4th step  --> search space = N / 8
     .
     .
     .
     .
   Nth step --> search space = 1

5. NLOG(N) :
------------

Eg : Merge Sort , Quick Sort

TIME COMPLEXITY OF CONDITIONAL STATEMENT : 
------------------------------------------

Eg : void fun(n){
         if(n < 100){
              System.out.println(n);
         }
         else{
             for(int i = 0 ; i < n ; i++){
                 System.out.println(i);
             }
         }
     }

     Time Complexity --> O(1) if n < 100
                     --> O(n) if n >= 100

Simple case study:
-------------------


void fun(int n){
        for(int i = 0 ; i < i++){                        |
            for(int j = 0 ; j < n ; j++){                |
                for(int k = 0 ; k < n ; k++){            |
                    System.out.println(i * j * k);       |   O(n^3)
                }                                        |
            }                                            |
        }                                                |

        for(int i = 0 ; i < n ; i++){                    |
            for(int j = 0 ; j < n ; j++){                |
                System.out.println(i + j);               |  O(n^2)
            }                                            |
        }                                                |

        for(int i = 0 ; i < n ; i++){                    |
            System.out.println(i);                       |  O(n)
        }                                                |
}

Time Cmplexity  = n^3 + n^2 + n
         (neglecting lower order terms)
                = O(n^3)